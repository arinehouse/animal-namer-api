{
  "name": "animal-namer",
  "version": "2.0.0",
  "description": "Generate Synonym+Animal Usernames",
  "main": "app.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/notduncansmith/animal-namer.git"
  },
  "homepage": "https://github.com/notduncansmith/animal-namer",
  "scripts": {
    "test": "jasmine-node --color --coffee spec",
    "compile": "./node_modules/coffee-script/bin/coffee -bc app.coffee"
  },
  "author": {
    "name": "Duncan Smith"
  },
  "license": "MIT",
  "dependencies": {
    "bluebird": "^2.3.11",
    "lodash": "^2.4.1",
    "wordpos": "^0.1.15"
  },
  "devDependencies": {
    "coffee-script": "^1.8.0"
  },
  "readme": "# Animal-Namer\n\nAnimal names for everybody!\n\n```\nnpm install animal-namer\n```\n\n# What?\n\nThis module generates alliterative phrases in the following format: `{adjective} {animalName}`\n\nExamples:\n\n```\n  Overfull Okapi\n  Decrepit Donkey\n  Minuscule Mongoose\n```\n\n\n# Why?\n\nI wanted a way to generate simple, fun, ephemeral usernames.\n\n\n# How? (Usage)\n\n## Setup\n\n```javascript\nvar AnimalNamer = require('animal-namer');\nnamer = new AnimalNamer();\n\n// You can use your own file instead\n// Just put an array of strings into the file\ncustomNamer = new AnimalNamer('path/to/my/animals.json'); \n```\n\n## Get a name\n\nAll public methods return Promises (see the [Bluebird](https://github.com/petkaantonov/bluebird) docs for more info).\n\n```javascript\nnamer.name().then(console.log); // => \"Exemplary Elephant\"\n```\n\n## Other Stuff\nYou can also use the `adj` or `animal` methods to get just an animal or adjective.\nEither of these methods optionally take a single-letter argument, which the returned value will start with.\n\n```javascript\nnamer.adj('s').then(console.log); // => \"Salacious\"\nnamer.animal().then(console.log); // => \"Aardvark\"\nnamer.adjective('s').then(console.log); // alias for `adj`\n```\n\n**Note that the list of animals is not immediately loaded.**\n\nWhen you call one of `animal`, `name`, or `adj` for the first time, AnimalNamer will read the animal list from the configured file. The result will be stored, so subsequent calls will not trigger a file-system read.\n\nHowever, you can explicitly load them in advance:\n\n```javascript\n// Use the packaged animal file\nnamer.load();\n\n// Or use your own file\nnamer.load('path/to/my/animals.json');\n\n// You can also load synchronously\nnamer.loadSync();\n\n// And yes, you can still use your own file\nnamer.loadSync('path/to/my/animals.json');\n```\n\n\n# Contributors\n\nDuncan Smith ([notduncansmith](https://github.com/notduncansmith))\nNicole Whitehead ([ncwhitehead](https://github.com/ncwhitehead))\n\n\n\n# Contributing\n\nI'm happy to review any pull requests!  \n\nI just ask that you follow a few guidelines before submitting:\n\n- All tests must pass\n- Add tests for any new features\n- Remember to compile to Javascript\n\n\n# License and stuff\n\nMIT License\n\nCopyright 2014 Duncan Smith",
  "readmeFilename": "README.md",
  "gitHead": "6738c7dfa2cd5779cb3c3288b83260dd80298228",
  "bugs": {
    "url": "https://github.com/notduncansmith/animal-namer/issues"
  },
  "_id": "animal-namer@2.0.0",
  "_shasum": "74963e690ca3b0a323e11169e458d668c5f75cf5",
  "_from": "animal-namer@^2.0.0"
}
